name: Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker buildx build \
            --platform linux/amd64 \
            --target production \
            -t tauras-backend:latest \
            --load \
            .

      - name: Save Docker image to tar
        run: docker save tauras-backend:latest -o tauras-backend.tar

      - name: Set permissions on tar file
        run: chmod 644 tauras-backend.tar

      - name: Generate .env file
        run: |
          cat <<EOF > .env
          ACCESS_EXPIRES_IN=${{ vars.ACCESS_EXPIRES_IN }}
          ACCESS_PRIVATE_KEY=${{ secrets.ACCESS_PRIVATE_KEY }}
          ACCESS_PUBLIC_KEY=${{ secrets.ACCESS_PUBLIC_KEY }}
          REFRESH_EXPIRES_IN=${{ vars.REFRESH_EXPIRES_IN }}
          REFRESH_PRIVATE_KEY=${{ secrets.REFRESH_PRIVATE_KEY }}
          REFRESH_PUBLIC_KEY=${{ secrets.REFRESH_PUBLIC_KEY }}
          JWT_AUDIENCE=${{ vars.JWT_AUDIENCE }}
          JWT_ISSUER=${{ vars.JWT_ISSUER }}
          APP_PORT=${{ vars.APP_PORT }}
          BASE_URL=${{ vars.BASE_URL }}
          NODE_ENV=${{ vars.NODE_ENV }}
          LOG_LEVEL=${{ vars.LOG_LEVEL }}
          PASSWORD_HASH_SALT=${{ secrets.PASSWORD_HASH_SALT }}
          CORS_ORIGIN=${{ vars.CORS_ORIGIN }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}
          VERIFY_EMAIL_LINK=${{ vars.VERIFY_EMAIL_LINK }}
          VERIFY_EMAIL_PASSCODE_LIFETIME=${{ vars.VERIFY_EMAIL_PASSCODE_LIFETIME }}
          VERIFY_EMAIL_PASSCODE_RESEND_RATE=${{ vars.VERIFY_EMAIL_PASSCODE_RESEND_RATE }}
          RESTORE_PASSWORD_LINK=${{ vars.RESTORE_PASSWORD_LINK }}
          RESTORE_PASSWORD_TOKEN_LIFETIME=${{ vars.RESTORE_PASSWORD_TOKEN_LIFETIME }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DATABASE_URL=postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASSWORD }}@${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          REDIS_USER=${{ secrets.REDIS_USER }}
          REDIS_PASSWORD=${{ secrets.REDIS_PASSWORD }}
          REDIS_URL=redis://${{ secrets.REDIS_HOST }}:${{ secrets.REDIS_PORT }}
          MAIL_HOST=${{ secrets.MAIL_HOST }}
          MAIL_PORT=${{ secrets.MAIL_PORT }}
          MAIL_FROM=${{ vars.MAIL_FROM }}
          MAIL_USER=${{ secrets.MAIL_USER }}
          MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }}
          MAIL_SECURE=${{ vars.MAIL_SECURE }}
          EOF

      - name: Copy Docker image and .env to VPS
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          source: 'tauras-backend.tar,.env'
          target: '~/app/'

      - name: Load and run Docker image on VPS
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          script: |
            cd ~/app
            ls -l tauras-backend.tar .env
            docker stop tauras-backend || true
            docker rm tauras-backend || true
            docker load -i tauras-backend.tar
            docker run -d --name tauras-backend \
              -p ${{ vars.APP_PORT }}:${{ vars.APP_PORT }} \
              -v ./logs:/usr/app/logs \
              -v ./keys:/usr/app/keys \
              --restart unless-stopped \
              --env-file .env \
              tauras-backend:latest
